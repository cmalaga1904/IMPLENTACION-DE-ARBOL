#include <iostream>
#include <cstdlib>
using namespace std;

// Definimos la estructura de un nodo del árbol AVL
struct nodo {
    int valor;         // Valor almacenado en el nodo
    int altura;        // Altura del nodo
    struct nodo *izq;  // Puntero al subárbol izquierdo
    struct nodo *der;  // Puntero al subárbol derecho
};

// Punteros globales para manejar la raíz del árbol
struct nodo *raiz = NULL, *aux, *aux2;

// Función para obtener la altura de un nodo
int altura(struct nodo *n) {
    return (n == NULL) ? 0 : n->altura;
}

// Función para calcular el factor de balanceo de un nodo
int balance(struct nodo *n) {
    return (n == NULL) ? 0 : altura(n->izq) - altura(n->der);
}

// Rotación a la derecha para reequilibrar el árbol
struct nodo* rotarDerecha(struct nodo *y) {
    struct nodo *x = y->izq;
    struct nodo *T2 = x->der;

    x->der = y;
    y->izq = T2;

    y->altura = max(altura(y->izq), altura(y->der)) + 1;
    x->altura = max(altura(x->izq), altura(x->der)) + 1;

    return x;
}

// Rotación a la izquierda para reequilibrar el árbol
struct nodo* rotarIzquierda(struct nodo *x) {
    struct nodo *y = x->der;
    struct nodo *T2 = y->izq;

    y->izq = x;
    x->der = T2;

    x->altura = max(altura(x->izq), altura(x->der)) + 1;
    y->altura = max(altura(y->izq), altura(y->der)) + 1;

    return y;
}

// Función para insertar un valor en el árbol AVL
struct nodo* insertar(struct nodo* n, int valor) {
    if (n == NULL) {
        struct nodo* nuevo = (struct nodo*)malloc(sizeof(struct nodo));
        nuevo->valor = valor;
        nuevo->altura = 1;
        nuevo->izq = nuevo->der = NULL;
        return nuevo;
    }

    if (valor < n->valor) {
        n->izq = insertar(n->izq, valor);
    } else if (valor > n->valor) {
        n->der = insertar(n->der, valor);
    } else {
        return n; // No se permiten valores duplicados
    }

    n->altura = max(altura(n->izq), altura(n->der)) + 1;

    int factor = balance(n);

    // Casos de rotación
    if (factor > 1 && valor < n->izq->valor)
        return rotarDerecha(n);

    if (factor < -1 && valor > n->der->valor)
        return rotarIzquierda(n);

    if (factor > 1 && valor > n->izq->valor) {
        n->izq = rotarIzquierda(n->izq);
        return rotarDerecha(n);
    }

    if (factor < -1 && valor < n->der->valor) {
        n->der = rotarDerecha(n->der);
        return rotarIzquierda(n);
    }

    return n;
}

// Función para encontrar el nodo con el valor más pequeño
struct nodo* nodoMinimo(struct nodo* n) {
    struct nodo* actual = n;

    while (actual->izq != NULL)
        actual = actual->izq;

    return actual;
}

// Función para eliminar un nodo del árbol AVL
struct nodo* eliminar(struct nodo* n, int valor) {
    if (n == NULL) return n;

    if (valor < n->valor) {
        n->izq = eliminar(n->izq, valor);
    } else if (valor > n->valor) {
        n->der = eliminar(n->der, valor);
    } else {
        if ((n->izq == NULL) || (n->der == NULL)) {
            struct nodo* temp = (n->izq != NULL) ? n->izq : n->der;

            if (temp == NULL) {
                temp = n;
                n = NULL;
            } else {
                *n = *temp;
            }
            free(temp);
        } else {
            struct nodo* temp = nodoMinimo(n->der);
            n->valor = temp->valor;
            n->der = eliminar(n->der, temp->valor);
        }
    }

    if (n == NULL) return n;

    n->altura = max(altura(n->izq), altura(n->der)) + 1;

    int factor = balance(n);

    // Casos de rotación
    if (factor > 1 && balance(n->izq) >= 0)
        return rotarDerecha(n);

    if (factor > 1 && balance(n->izq) < 0) {
        n->izq = rotarIzquierda(n->izq);
        return rotarDerecha(n);
    }

    if (factor < -1 && balance(n->der) <= 0)
        return rotarIzquierda(n);

    if (factor < -1 && balance(n->der) > 0) {
        n->der = rotarDerecha(n->der);
        return rotarIzquierda(n);
    }

    return n;
}

// Función para mostrar el árbol en formato jerárquico
void mostrar(struct nodo* actual, int nivel) {
    if (actual != NULL) {
        mostrar(actual->der, nivel + 1);
        cout << string(nivel * 4, ' ') << actual->valor << endl;
        mostrar(actual->izq, nivel + 1);
    }
}

// Función principal
int main() {
    int opcion, valor;

    do {
        cout << "\n1. Insertar";
        cout << "\n2. Mostrar";
        cout << "\n3. Eliminar";
        cout << "\n4. Salir";
        cout << "\n\nOpción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                cout << "Valor a insertar: ";
                cin >> valor;
                raiz = insertar(raiz, valor);
                break;

            case 2:
                cout << "Árbol AVL:\n";
                mostrar(raiz, 0);
                break;

            case 3:
                cout << "Valor a eliminar: ";
                cin >> valor;
                raiz = eliminar(raiz, valor);
                break;

            case 4:
                cout << "Saliendo del programa." << endl;
                break;

            default:
                cout << "Opción no válida." << endl;
                break;
        }
    } while (opcion != 4);

    return 0;
}
